/* eslint-disable */
/**
 * 台州供水项目
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    globalAxios,
    AxiosPromise,
    AxiosInstance,
    AxiosRequestConfig,
    URL,
    Configuration,
    DUMMY_BASE_URL,
    setSearchParams,
    serializeDataIfNeeded,
    toPathString,
    createRequestFunction,
    BASE_PATH,
    RequestArgs,
    BaseAPI,
} from '@dhicn/domain-paas-sdk-ts/sdk-helper'
// @ts-ignore
import { AddListParameterConfigInput } from '../models'
// @ts-ignore
import { AddParameterConfigInput } from '../models'
// @ts-ignore
import { DeleteParameterConfigInput } from '../models'
// @ts-ignore
import { ParameterConfigDto } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
/**
 * TzParameterApi - axios parameter creator
 * @export
 */
export const TzParameterApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary 新增参数配置
         * @param {Array<AddParameterConfigInput>} [addParameterConfigInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TzWdParameterAddPost: async (
            addParameterConfigInput?: Array<AddParameterConfigInput>,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tz_wd/parameter/add`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter['Content-Type'] = 'application/json'

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }
            localVarRequestOptions.data = serializeDataIfNeeded(
                addParameterConfigInput,
                localVarRequestOptions,
                configuration,
            )

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @summary 获取所有参数配置
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TzWdParameterAllGet: async (
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tz_wd/parameter/all`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @summary 删除参数配置
         * @param {DeleteParameterConfigInput} [deleteParameterConfigInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TzWdParameterDeletePost: async (
            deleteParameterConfigInput?: DeleteParameterConfigInput,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tz_wd/parameter/delete`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter['Content-Type'] = 'application/json'

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }
            localVarRequestOptions.data = serializeDataIfNeeded(
                deleteParameterConfigInput,
                localVarRequestOptions,
                configuration,
            )

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @summary 初始化参数配置
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TzWdParameterInitAddPost: async (
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tz_wd/parameter/init-add`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @summary 更新参数配置
         * @param {Array<AddListParameterConfigInput>} [addListParameterConfigInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TzWdParameterListUpdatePost: async (
            addListParameterConfigInput?: Array<AddListParameterConfigInput>,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tz_wd/parameter/list-update`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter['Content-Type'] = 'application/json'

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }
            localVarRequestOptions.data = serializeDataIfNeeded(
                addListParameterConfigInput,
                localVarRequestOptions,
                configuration,
            )

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
    }
}

/**
 * TzParameterApi - functional programming interface
 * @export
 */
export const TzParameterApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = TzParameterApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary 新增参数配置
         * @param {Array<AddParameterConfigInput>} [addParameterConfigInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TzWdParameterAddPost(
            addParameterConfigInput?: Array<AddParameterConfigInput>,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TzWdParameterAddPost(
                addParameterConfigInput,
                options,
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @summary 获取所有参数配置
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TzWdParameterAllGet(
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ParameterConfigDto>>
        > {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TzWdParameterAllGet(
                options,
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @summary 删除参数配置
         * @param {DeleteParameterConfigInput} [deleteParameterConfigInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TzWdParameterDeletePost(
            deleteParameterConfigInput?: DeleteParameterConfigInput,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TzWdParameterDeletePost(
                deleteParameterConfigInput,
                options,
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @summary 初始化参数配置
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TzWdParameterInitAddPost(
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1TzWdParameterInitAddPost(
                options,
            )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @summary 更新参数配置
         * @param {Array<AddListParameterConfigInput>} [addListParameterConfigInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TzWdParameterListUpdatePost(
            addListParameterConfigInput?: Array<AddListParameterConfigInput>,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.apiV1TzWdParameterListUpdatePost(
                    addListParameterConfigInput,
                    options,
                )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
    }
}

/**
 * TzParameterApi - factory interface
 * @export
 */
export const TzParameterApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    const localVarFp = TzParameterApiFp(configuration)
    return {
        /**
         *
         * @summary 新增参数配置
         * @param {Array<AddParameterConfigInput>} [addParameterConfigInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TzWdParameterAddPost(
            addParameterConfigInput?: Array<AddParameterConfigInput>,
            options?: any,
        ): AxiosPromise<object> {
            return localVarFp
                .apiV1TzWdParameterAddPost(addParameterConfigInput, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @summary 获取所有参数配置
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TzWdParameterAllGet(options?: any): AxiosPromise<Array<ParameterConfigDto>> {
            return localVarFp
                .apiV1TzWdParameterAllGet(options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @summary 删除参数配置
         * @param {DeleteParameterConfigInput} [deleteParameterConfigInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TzWdParameterDeletePost(
            deleteParameterConfigInput?: DeleteParameterConfigInput,
            options?: any,
        ): AxiosPromise<object> {
            return localVarFp
                .apiV1TzWdParameterDeletePost(deleteParameterConfigInput, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @summary 初始化参数配置
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TzWdParameterInitAddPost(options?: any): AxiosPromise<object> {
            return localVarFp
                .apiV1TzWdParameterInitAddPost(options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @summary 更新参数配置
         * @param {Array<AddListParameterConfigInput>} [addListParameterConfigInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TzWdParameterListUpdatePost(
            addListParameterConfigInput?: Array<AddListParameterConfigInput>,
            options?: any,
        ): AxiosPromise<boolean> {
            return localVarFp
                .apiV1TzWdParameterListUpdatePost(addListParameterConfigInput, options)
                .then((request) => request(axios, basePath))
        },
    }
}

/**
 * TzParameterApi - object-oriented interface
 * @export
 * @class TzParameterApi
 * @extends {BaseAPI}
 */
export class TzParameterApi extends BaseAPI {
    /**
     *
     * @summary 新增参数配置
     * @param {Array<AddParameterConfigInput>} [addParameterConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TzParameterApi
     */
    public apiV1TzWdParameterAddPost(
        addParameterConfigInput?: Array<AddParameterConfigInput>,
        options?: AxiosRequestConfig,
    ) {
        return TzParameterApiFp(this.configuration)
            .apiV1TzWdParameterAddPost(addParameterConfigInput, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @summary 获取所有参数配置
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TzParameterApi
     */
    public apiV1TzWdParameterAllGet(options?: AxiosRequestConfig) {
        return TzParameterApiFp(this.configuration)
            .apiV1TzWdParameterAllGet(options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @summary 删除参数配置
     * @param {DeleteParameterConfigInput} [deleteParameterConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TzParameterApi
     */
    public apiV1TzWdParameterDeletePost(
        deleteParameterConfigInput?: DeleteParameterConfigInput,
        options?: AxiosRequestConfig,
    ) {
        return TzParameterApiFp(this.configuration)
            .apiV1TzWdParameterDeletePost(deleteParameterConfigInput, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @summary 初始化参数配置
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TzParameterApi
     */
    public apiV1TzWdParameterInitAddPost(options?: AxiosRequestConfig) {
        return TzParameterApiFp(this.configuration)
            .apiV1TzWdParameterInitAddPost(options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @summary 更新参数配置
     * @param {Array<AddListParameterConfigInput>} [addListParameterConfigInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TzParameterApi
     */
    public apiV1TzWdParameterListUpdatePost(
        addListParameterConfigInput?: Array<AddListParameterConfigInput>,
        options?: AxiosRequestConfig,
    ) {
        return TzParameterApiFp(this.configuration)
            .apiV1TzWdParameterListUpdatePost(addListParameterConfigInput, options)
            .then((request) => request(this.axios, this.basePath))
    }
}
