/* tslint:disable */
/* eslint-disable */
/**
 * 台州供水项目
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    globalAxios,
    AxiosPromise,
    AxiosInstance,
    AxiosRequestConfig,
    URL,
    Configuration,
    DUMMY_BASE_URL,
    setSearchParams,
    serializeDataIfNeeded,
    toPathString,
    createRequestFunction,
    BASE_PATH,
    RequestArgs,
    BaseAPI,
} from '@dhicn/domain-paas-sdk-ts/sdk-helper'
// @ts-ignore
import { ComputeOutput } from '../models'
// @ts-ignore
import { FenQiFlowInfo } from '../models'
// @ts-ignore
import { FilterModelResultDto } from '../models'
// @ts-ignore
import { FilterModelResultRangeTimeDto } from '../models'
// @ts-ignore
import { GetFilterModelResultInput } from '../models'
// @ts-ignore
import { GetFilterModelResultRangeTime } from '../models'
// @ts-ignore
import { GetScenarioFenQiFlowInput } from '../models'
// @ts-ignore
import { GetScenarioScheduleFlowInput } from '../models'
// @ts-ignore
import { RemoteServiceErrorResponse } from '../models'
// @ts-ignore
import { ScenarioAllocationEditDto } from '../models'
// @ts-ignore
import { ScenarioComputeInput } from '../models'
// @ts-ignore
import { ScenarioScheduleFlowDto } from '../models'
/**
 * TzScheduleApi - axios parameter creator
 * @export
 */
export const TzScheduleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary 按照筛选条件查询模型信息和模拟结果
         * @param {GetFilterModelResultInput} [getFilterModelResultInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TzWdScenarioScheduleFilterModelResultPost: async (
            getFilterModelResultInput?: GetFilterModelResultInput,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tz_wd/scenario-schedule/filter-model-result`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter['Content-Type'] = 'application/json'

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }
            localVarRequestOptions.data = serializeDataIfNeeded(
                getFilterModelResultInput,
                localVarRequestOptions,
                configuration,
            )

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @summary 按照筛选条件查询时段内模型信息和模拟结果
         * @param {GetFilterModelResultRangeTime} [getFilterModelResultRangeTime]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TzWdScenarioScheduleFilterModelResultRangetimePost: async (
            getFilterModelResultRangeTime?: GetFilterModelResultRangeTime,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tz_wd/scenario-schedule/filter-model-result-rangetime`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter['Content-Type'] = 'application/json'

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }
            localVarRequestOptions.data = serializeDataIfNeeded(
                getFilterModelResultRangeTime,
                localVarRequestOptions,
                configuration,
            )

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @summary 获取长潭水库一天平均液位
         * @param {string} [startTime]
         * @param {string} [endTime]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TzWdScenarioScheduleGetChangtanAvglevelGet: async (
            startTime?: string,
            endTime?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tz_wd/scenario-schedule/get-changtan-avglevel`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @summary 获取指定方案保存的调配编辑数据，方案可以是专家库中的方案，也可以是调度预案
         * @param {string} [scenarioId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TzWdScenarioScheduleGetFlowEditByScenarioIdGet: async (
            scenarioId?: string,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tz_wd/scenario-schedule/get-flow-edit-by-scenarioId`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            if (scenarioId !== undefined) {
                localVarQueryParameter['scenarioId'] = scenarioId
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @summary 根据编辑的测点调配水量获取分期水量数据，以验证编辑的数据是否合理
         * @param {GetScenarioFenQiFlowInput} [getScenarioFenQiFlowInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TzWdScenarioScheduleGetScenarioFenqiFlowPost: async (
            getScenarioFenQiFlowInput?: GetScenarioFenQiFlowInput,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tz_wd/scenario-schedule/get-scenario-fenqi-flow`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter['Content-Type'] = 'application/json'

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }
            localVarRequestOptions.data = serializeDataIfNeeded(
                getScenarioFenQiFlowInput,
                localVarRequestOptions,
                configuration,
            )

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @summary 获取指定日期的实测调配水量
         * @param {GetScenarioScheduleFlowInput} [getScenarioScheduleFlowInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TzWdScenarioScheduleGetScenarioScheduleFlowPost: async (
            getScenarioScheduleFlowInput?: GetScenarioScheduleFlowInput,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tz_wd/scenario-schedule/get-scenario-schedule-flow`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter['Content-Type'] = 'application/json'

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }
            localVarRequestOptions.data = serializeDataIfNeeded(
                getScenarioScheduleFlowInput,
                localVarRequestOptions,
                configuration,
            )

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @summary 保存并计算调度预案
         * @param {ScenarioComputeInput} [scenarioComputeInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TzWdScenarioScheduleScenarioSaveAndComputePost: async (
            scenarioComputeInput?: ScenarioComputeInput,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tz_wd/scenario-schedule/scenario-save-and-compute`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter['Content-Type'] = 'application/json'

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }
            localVarRequestOptions.data = serializeDataIfNeeded(
                scenarioComputeInput,
                localVarRequestOptions,
                configuration,
            )

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
    }
}

/**
 * TzScheduleApi - functional programming interface
 * @export
 */
export const TzScheduleApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = TzScheduleApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary 按照筛选条件查询模型信息和模拟结果
         * @param {GetFilterModelResultInput} [getFilterModelResultInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TzWdScenarioScheduleFilterModelResultPost(
            getFilterModelResultInput?: GetFilterModelResultInput,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FilterModelResultDto>>
        > {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.apiV1TzWdScenarioScheduleFilterModelResultPost(
                    getFilterModelResultInput,
                    options,
                )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @summary 按照筛选条件查询时段内模型信息和模拟结果
         * @param {GetFilterModelResultRangeTime} [getFilterModelResultRangeTime]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TzWdScenarioScheduleFilterModelResultRangetimePost(
            getFilterModelResultRangeTime?: GetFilterModelResultRangeTime,
            options?: AxiosRequestConfig,
        ): Promise<
            (
                axios?: AxiosInstance,
                basePath?: string,
            ) => AxiosPromise<Array<FilterModelResultRangeTimeDto>>
        > {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.apiV1TzWdScenarioScheduleFilterModelResultRangetimePost(
                    getFilterModelResultRangeTime,
                    options,
                )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @summary 获取长潭水库一天平均液位
         * @param {string} [startTime]
         * @param {string} [endTime]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TzWdScenarioScheduleGetChangtanAvglevelGet(
            startTime?: string,
            endTime?: string,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.apiV1TzWdScenarioScheduleGetChangtanAvglevelGet(
                    startTime,
                    endTime,
                    options,
                )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @summary 获取指定方案保存的调配编辑数据，方案可以是专家库中的方案，也可以是调度预案
         * @param {string} [scenarioId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TzWdScenarioScheduleGetFlowEditByScenarioIdGet(
            scenarioId?: string,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScenarioAllocationEditDto>
        > {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.apiV1TzWdScenarioScheduleGetFlowEditByScenarioIdGet(
                    scenarioId,
                    options,
                )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @summary 根据编辑的测点调配水量获取分期水量数据，以验证编辑的数据是否合理
         * @param {GetScenarioFenQiFlowInput} [getScenarioFenQiFlowInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TzWdScenarioScheduleGetScenarioFenqiFlowPost(
            getScenarioFenQiFlowInput?: GetScenarioFenQiFlowInput,
            options?: AxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FenQiFlowInfo>>
        > {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.apiV1TzWdScenarioScheduleGetScenarioFenqiFlowPost(
                    getScenarioFenQiFlowInput,
                    options,
                )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @summary 获取指定日期的实测调配水量
         * @param {GetScenarioScheduleFlowInput} [getScenarioScheduleFlowInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TzWdScenarioScheduleGetScenarioScheduleFlowPost(
            getScenarioScheduleFlowInput?: GetScenarioScheduleFlowInput,
            options?: AxiosRequestConfig,
        ): Promise<
            (
                axios?: AxiosInstance,
                basePath?: string,
            ) => AxiosPromise<Array<ScenarioScheduleFlowDto>>
        > {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.apiV1TzWdScenarioScheduleGetScenarioScheduleFlowPost(
                    getScenarioScheduleFlowInput,
                    options,
                )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
        /**
         *
         * @summary 保存并计算调度预案
         * @param {ScenarioComputeInput} [scenarioComputeInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TzWdScenarioScheduleScenarioSaveAndComputePost(
            scenarioComputeInput?: ScenarioComputeInput,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComputeOutput>> {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.apiV1TzWdScenarioScheduleScenarioSaveAndComputePost(
                    scenarioComputeInput,
                    options,
                )
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
        },
    }
}

/**
 * TzScheduleApi - factory interface
 * @export
 */
export const TzScheduleApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    const localVarFp = TzScheduleApiFp(configuration)
    return {
        /**
         *
         * @summary 按照筛选条件查询模型信息和模拟结果
         * @param {GetFilterModelResultInput} [getFilterModelResultInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TzWdScenarioScheduleFilterModelResultPost(
            getFilterModelResultInput?: GetFilterModelResultInput,
            options?: any,
        ): AxiosPromise<Array<FilterModelResultDto>> {
            return localVarFp
                .apiV1TzWdScenarioScheduleFilterModelResultPost(getFilterModelResultInput, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @summary 按照筛选条件查询时段内模型信息和模拟结果
         * @param {GetFilterModelResultRangeTime} [getFilterModelResultRangeTime]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TzWdScenarioScheduleFilterModelResultRangetimePost(
            getFilterModelResultRangeTime?: GetFilterModelResultRangeTime,
            options?: any,
        ): AxiosPromise<Array<FilterModelResultRangeTimeDto>> {
            return localVarFp
                .apiV1TzWdScenarioScheduleFilterModelResultRangetimePost(
                    getFilterModelResultRangeTime,
                    options,
                )
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @summary 获取长潭水库一天平均液位
         * @param {string} [startTime]
         * @param {string} [endTime]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TzWdScenarioScheduleGetChangtanAvglevelGet(
            startTime?: string,
            endTime?: string,
            options?: any,
        ): AxiosPromise<number> {
            return localVarFp
                .apiV1TzWdScenarioScheduleGetChangtanAvglevelGet(startTime, endTime, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @summary 获取指定方案保存的调配编辑数据，方案可以是专家库中的方案，也可以是调度预案
         * @param {string} [scenarioId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TzWdScenarioScheduleGetFlowEditByScenarioIdGet(
            scenarioId?: string,
            options?: any,
        ): AxiosPromise<ScenarioAllocationEditDto> {
            return localVarFp
                .apiV1TzWdScenarioScheduleGetFlowEditByScenarioIdGet(scenarioId, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @summary 根据编辑的测点调配水量获取分期水量数据，以验证编辑的数据是否合理
         * @param {GetScenarioFenQiFlowInput} [getScenarioFenQiFlowInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TzWdScenarioScheduleGetScenarioFenqiFlowPost(
            getScenarioFenQiFlowInput?: GetScenarioFenQiFlowInput,
            options?: any,
        ): AxiosPromise<Array<FenQiFlowInfo>> {
            return localVarFp
                .apiV1TzWdScenarioScheduleGetScenarioFenqiFlowPost(
                    getScenarioFenQiFlowInput,
                    options,
                )
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @summary 获取指定日期的实测调配水量
         * @param {GetScenarioScheduleFlowInput} [getScenarioScheduleFlowInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TzWdScenarioScheduleGetScenarioScheduleFlowPost(
            getScenarioScheduleFlowInput?: GetScenarioScheduleFlowInput,
            options?: any,
        ): AxiosPromise<Array<ScenarioScheduleFlowDto>> {
            return localVarFp
                .apiV1TzWdScenarioScheduleGetScenarioScheduleFlowPost(
                    getScenarioScheduleFlowInput,
                    options,
                )
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @summary 保存并计算调度预案
         * @param {ScenarioComputeInput} [scenarioComputeInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TzWdScenarioScheduleScenarioSaveAndComputePost(
            scenarioComputeInput?: ScenarioComputeInput,
            options?: any,
        ): AxiosPromise<ComputeOutput> {
            return localVarFp
                .apiV1TzWdScenarioScheduleScenarioSaveAndComputePost(scenarioComputeInput, options)
                .then((request) => request(axios, basePath))
        },
    }
}

/**
 * TzScheduleApi - object-oriented interface
 * @export
 * @class TzScheduleApi
 * @extends {BaseAPI}
 */
export class TzScheduleApi extends BaseAPI {
    /**
     *
     * @summary 按照筛选条件查询模型信息和模拟结果
     * @param {GetFilterModelResultInput} [getFilterModelResultInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TzScheduleApi
     */
    public apiV1TzWdScenarioScheduleFilterModelResultPost(
        getFilterModelResultInput?: GetFilterModelResultInput,
        options?: AxiosRequestConfig,
    ) {
        return TzScheduleApiFp(this.configuration)
            .apiV1TzWdScenarioScheduleFilterModelResultPost(getFilterModelResultInput, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @summary 按照筛选条件查询时段内模型信息和模拟结果
     * @param {GetFilterModelResultRangeTime} [getFilterModelResultRangeTime]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TzScheduleApi
     */
    public apiV1TzWdScenarioScheduleFilterModelResultRangetimePost(
        getFilterModelResultRangeTime?: GetFilterModelResultRangeTime,
        options?: AxiosRequestConfig,
    ) {
        return TzScheduleApiFp(this.configuration)
            .apiV1TzWdScenarioScheduleFilterModelResultRangetimePost(
                getFilterModelResultRangeTime,
                options,
            )
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @summary 获取长潭水库一天平均液位
     * @param {string} [startTime]
     * @param {string} [endTime]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TzScheduleApi
     */
    public apiV1TzWdScenarioScheduleGetChangtanAvglevelGet(
        startTime?: string,
        endTime?: string,
        options?: AxiosRequestConfig,
    ) {
        return TzScheduleApiFp(this.configuration)
            .apiV1TzWdScenarioScheduleGetChangtanAvglevelGet(startTime, endTime, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @summary 获取指定方案保存的调配编辑数据，方案可以是专家库中的方案，也可以是调度预案
     * @param {string} [scenarioId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TzScheduleApi
     */
    public apiV1TzWdScenarioScheduleGetFlowEditByScenarioIdGet(
        scenarioId?: string,
        options?: AxiosRequestConfig,
    ) {
        return TzScheduleApiFp(this.configuration)
            .apiV1TzWdScenarioScheduleGetFlowEditByScenarioIdGet(scenarioId, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @summary 根据编辑的测点调配水量获取分期水量数据，以验证编辑的数据是否合理
     * @param {GetScenarioFenQiFlowInput} [getScenarioFenQiFlowInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TzScheduleApi
     */
    public apiV1TzWdScenarioScheduleGetScenarioFenqiFlowPost(
        getScenarioFenQiFlowInput?: GetScenarioFenQiFlowInput,
        options?: AxiosRequestConfig,
    ) {
        return TzScheduleApiFp(this.configuration)
            .apiV1TzWdScenarioScheduleGetScenarioFenqiFlowPost(getScenarioFenQiFlowInput, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @summary 获取指定日期的实测调配水量
     * @param {GetScenarioScheduleFlowInput} [getScenarioScheduleFlowInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TzScheduleApi
     */
    public apiV1TzWdScenarioScheduleGetScenarioScheduleFlowPost(
        getScenarioScheduleFlowInput?: GetScenarioScheduleFlowInput,
        options?: AxiosRequestConfig,
    ) {
        return TzScheduleApiFp(this.configuration)
            .apiV1TzWdScenarioScheduleGetScenarioScheduleFlowPost(
                getScenarioScheduleFlowInput,
                options,
            )
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @summary 保存并计算调度预案
     * @param {ScenarioComputeInput} [scenarioComputeInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TzScheduleApi
     */
    public apiV1TzWdScenarioScheduleScenarioSaveAndComputePost(
        scenarioComputeInput?: ScenarioComputeInput,
        options?: AxiosRequestConfig,
    ) {
        return TzScheduleApiFp(this.configuration)
            .apiV1TzWdScenarioScheduleScenarioSaveAndComputePost(scenarioComputeInput, options)
            .then((request) => request(this.axios, this.basePath))
    }
}
